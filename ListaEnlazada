#include <stdio.h>
#include <stdlib.h>

// Data structure to store a linked list node
struct Node
{
    int data;
    struct Node* next;
};


/*
    Takes a list and a data value, creates a new link with the given data
    and pushes it onto the list's front
*/
struct Node* push(struct Node** head, int data)
{
    // allocate a new node in a heap and set its data
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;

    // set the `.next` pointer of the new node to point to the current
    // first node of the list.
    newNode->next = *head;
    
    if (*head == NULL) {
        *head = newNode;
        return newNode;
    }else {
        struct Node* current = *head;
        // locate the last node
        while (current->next != NULL) {
            current = current->next;
        }

        // Build the node after the last node
        current->next = push(&(current->next), data);
        return *head;
    }
}
struct Node* constructList(int keys[], int n)
{
    struct Node* head = NULL;

    // start from the end of the array
    for (int i=0; i<n ; i++) {
        head = push(&head, keys[i]);    // update head here
        
    }

    return head;
}

void printList(struct Node* head)
{
    struct Node* ptr = head;
    while (ptr)
    {
        printf("%d -> ", ptr->data);
        ptr = ptr->next;
    }

    printf("NULL");
}


// Helper function to print a linked list


int main(void)
{
    // input keys
    int keys[] = {1, 2, 3, 4};
    int n = sizeof(keys)/sizeof(keys[0]);

    // points to the head node of the linked list
    struct Node* head = constructList(keys,n);

    // print linked list
    //printList(head);
    
    keys[3] = 4;
    keys[4] = 100;
    push(&head,5);
    //printList(head);
    
    keys[5] = 101;
    keys[6]=0;
    push(&head,998);
    push(&head,44);
    printList(head);
    return 0;
}
